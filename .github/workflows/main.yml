name: Build PHP binaries

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  linux:
    name: Linux for PM ${{ matrix.pm-version }}
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    strategy:
      matrix:
        pm-version: [4, 5]

    steps:
      - uses: actions/checkout@v3

      - name: Install tools and dependencies
        run: |
          wget -qO - https://packages.confluent.io/deb/7.2/archive.key | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://packages.confluent.io/deb/7.2 stable main"
          sudo add-apt-repository "deb https://packages.confluent.io/clients/deb $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install make autoconf automake libtool libtool-bin m4 wget libc-bin gzip bzip2 bison g++ git re2c librdkafka-dev

      - name: Compile PHP
        run: |
          # Used "set -ex" instead of hashbang since script isn't executed with hashbang
          set -ex
          trap "exit 1" ERR
          ./compile.sh -t linux64 -j 4 -f -g -P ${{ matrix.pm-version }}

      - name: Create tarball
        run: |
          tar -czf ./PHP_Linux-x86_64.tar.gz bin
          zip -r Linux-PM${{ matrix.pm-version }}.zip ./PHP_Linux-x86_64.tar.gz install.log

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Linux-PM${{ matrix.pm-version }}
          path: Linux-PM${{ matrix.pm-version }}.zip

      - name: Prepare workspace for upload
        if: failure()
        run: tar -czf workspace.tar.gz install_data

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Linux-PM${{ matrix.pm-version }}-workspace
          path: |
            workspace.tar.gz
          if-no-files-found: error

  macos:
    name: MacOS
    runs-on: macos-11.0
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - uses: actions/checkout@v3

      - name: Install tools and dependencies
        run: brew install libtool autoconf automake pkg-config bison re2c

      - name: Compile PHP
        run: |
          export PATH="/usr/local/opt/bison/bin:$PATH"
          set -ex
          trap "exit 1" ERR
          ./compile.sh -t mac-x86-64 -j4 -f -g

      - name: Create tarball
        run: tar -czf ./PHP_MacOS-x86_64.tar.gz bin

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: MacOS
          path: |
            ./PHP_MacOS-x86_64.tar.gz
            install.log
            compile.sh
          if-no-files-found: error

      - name: Prepare workspace for upload
        if: failure()
        run: tar -czf workspace.tar.gz install_data

      - name: Upload workspace
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: MacOS-workspace
          path: |
            workspace.tar.gz
          if-no-files-found: error

  windows:
    name: Windows
    runs-on: windows-2019
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - uses: actions/checkout@v3

      - name: Install tools and dependencies
        run: choco install wget --no-progress

      - name: Compile PHP
        run: .\windows-compile-vs.bat
        env:
          VS_EDITION: Enterprise
          SOURCES_PATH: ${{ github.workspace }}\pocketmine-php-sdk

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Windows
          path: |
            php-*.zip
            compile.log
            windows-compile-vs.bat
          if-no-files-found: error

  prepare-release:
    runs-on: ubuntu-20.04
    needs: [linux, windows]
    if: "${{!contains(github.event.head_commit.message, '[ci skip]') && github.ref == 'refs/heads/stable'}}"

    steps:
      - uses: actions/checkout@v2
      - name: Set PHP version outputs
        id: php
        run: |
          VERSION=$(cat compile.sh | grep 'PHP_VERSION=' | sed 's/[^0-9.]*//g')
          echo "::set-output name=version::${VERSION}"
          TAG=$(echo "${VERSION::3}")
          echo "::set-output name=release_tag::${TAG}"
      - name: Restore release caches
        uses: actions/download-artifact@v2
      - name: Create and Publish Release for PM4
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          automatic_release_tag: "${{ steps.php.outputs.release_tag }}"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          title: "PHP ${{ steps.php.outputs.version }} for PM4"
          files: |
            Linux/Linux-PM4.zip
            Windows/php-*.zip
          prerelease: false
      - name: Create and Publish Release for PM5
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          automatic_release_tag: "${{ steps.php.outputs.release_tag }}-pm5"
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          title: "PHP ${{ steps.php.outputs.version }} for PM5"
          files: |
            Linux/Linux-PM5.zip
          prerelease: false
